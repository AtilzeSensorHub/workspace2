#include "qm_common.h"
#include "qm_uart.h"
#include "qm_common.h"
#include "qm_pinmux.h"
#include "qm_common.h"
#include "qm_uart.h"
#include "main.h"
#include "qm_common.h"
#include "qm_pinmux.h"
#include "clk.h"
#include "qm_gpio.h"
#include "string.h"
#include "stdlib.h"

// Initialise the XBee 3G module
void uart0_init()
{
	qm_uart_config_t uart1_cfg;
	qm_gpio_set_pin(QM_GPIO_0, 20);

#if (UART==0)
	{
		qm_pmux_select(QM_PIN_ID_19, QM_PMUX_FN_0);  // UART0 TXD
		qm_pmux_select(QM_PIN_ID_18, QM_PMUX_FN_0);  // UART0 RXD
		qm_pmux_select(QM_PIN_ID_41, QM_PMUX_FN_1);  // UART0 RTS
		qm_pmux_select(QM_PIN_ID_40, QM_PMUX_FN_1);  // UART0 CTS
		qm_pmux_input_en(QM_PIN_ID_18, true);
		qm_pmux_input_en(QM_PIN_ID_41, true);
	}
#elif (UART==1)
	{
		qm_pmux_select(QM_PIN_ID_16, QM_PIN_16_FN_UART1_TXD);  // UART1 TXD
		qm_pmux_select(QM_PIN_ID_17, QM_PIN_17_FN_UART1_RXD);  // UART1 RXD
		qm_pmux_select(QM_PIN_ID_9, QM_PIN_9_FN_UART1_RTS);  // UART1 RTS
		qm_pmux_select(QM_PIN_ID_8, QM_PIN_8_FN_UART1_CTS);  // UART1 CTS
		qm_pmux_input_en(QM_PIN_ID_17, true);
		qm_pmux_input_en(QM_PIN_ID_9, true);
	}
#else
#endif

#if (BPS==0)
    {
    	cfg->baud_divisor = QM_UART_CFG_BAUD_DL_PACK(0, 208, 5);
    }
#elif (BPS==1)
    {
    	cfg->baud_divisor = QM_UART_CFG_BAUD_DL_PACK(0, 17, 6);
    }
#else
#endif

	cfg->line_control = QM_UART_LC_8N1;
    cfg->hw_fc = false;

#if(UART==0)
    {
    	qm_uart_set_config(QM_UART_0, cfg);
    }

#elif(UART==1)
    {
    	qm_uart_set_config(QM_UART_1, cfg);
    }
#else
#endif

	clk_periph_enable(CLK_PERIPH_CLK | CLK_PERIPH_UARTA_REGISTER);
    clk_sys_udelay(5000000);    // Create 5 sec delay

#if(UART==0)
    {
	//send serial data starts
    uint8_t at0[] = "AT+CWMODE=3\r\n";
    qm_uart_write_buffer(QM_UART_0, at0, (sizeof(at0) - 1));
    clk_sys_udelay(3000000);    // Create 5 sec delay
    //ends


    //check serial output starts
    uint8_t uart_buffer=0;
	uint8_t uart_rx[16];
	memset(uart_rx,0,sizeof(uart_rx));
	static qm_uart_status_t uart0_status __attribute__((unused)) = 0;

    qm_uart_get_status(QM_UART_0, &uart0_status);
	clk_sys_udelay(10000); 	// Create 10 milisec delay

	if (uart0_status != QM_UART_IDLE)
	{
		for(int jj=0; jj<16; jj++)
		{
			qm_uart_read(QM_UART_0, &uart_buffer, &uart0_status);
			uart_rx[jj] = uart_buffer;
		}

	}
	//check serial output ends
    }

#elif (UART==1)
    {//send serial data starts
        uint8_t at0[] = "AT+CWMODE=?\r\n";
        qm_uart_write_buffer(QM_UART_0, at0, (sizeof(at0) - 1));
        clk_sys_udelay(3000000);    // Create 5 sec delay
        //ends


        //check serial output starts
        uint8_t uart_buffer=0;
    	uint8_t uart_rx[16];
    	memset(uart_rx,0,sizeof(uart_rx));
    	static qm_uart_status_t uart1_status __attribute__((unused)) = 0;

        qm_uart_get_status(QM_UART_1, &uart1_status);
    	clk_sys_udelay(10000); 	// Create 10 milisec delay

    	if (uart1_status != QM_UART_IDLE)
    	{
    		for(int jj=0; jj<16; jj++)
    		{
    			qm_uart_read(QM_UART_1, &uart_buffer, &uart1_status);
    			uart_rx[jj] = uart_buffer;
    		}

    	}
    }

#else
#endif
}
