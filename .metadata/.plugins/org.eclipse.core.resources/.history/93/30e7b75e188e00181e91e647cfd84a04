/*
 Copyright (c) 2017, Atilze Digital Sdn. Bhd.

 radio.c
 This is the library file for radio.

 Version   : 1.05
 Author    : Khoo Boon Kien / Tan Han Wei / Shahrul Azwan
 File Name : radio.c

 History:
   1.00 BK 18-Aug-17 Initial
   1.01 HW 23-Nov-17 Send battery level first
   1.02 HW 23-Nov-17 Added in debug message
   1.03 BK 08-May-18 Added downlink
   1.04 AZ 22-May-18 Call Pump A and Pump B downlink function during Tx with if else condition
   1.05 AZ 23-May-18 Add function to check irrigation pump status (pumpB)
 */

#include "sensors/pm25_hpma115.h"
#include "sensors/do_kit103d.h"
#include "sensors/ultrasonic_mb7060.h"
#include "sensors/temp_rh_sht10.h"
#include "sensors/floatswitch_lv600.h"
#include "sensors/ferti_pump_status.h"
#include "../main.h"
#include <stdint.h>
#include "system/utilities.h"
#include "system/xbee.h"
#include "wireless/lora.h"
#include "clk.h"
#include "system/gpio.h"
#include "string.h"

static qm_gpio_port_config_t cfg2;   // GPIO
static qm_gpio_port_config_t cfg02;  // AON GPIO

void radio_send_data(uint16_t *send_data)
{
#if (SENSOR_TYPE == 0)
	//============================================================================//
    //                              SMART FARMING0                                //
	//============================================================================//

	// Battery level===============================================================
	uint8_t battery_level[5];
	conv_to_2B_hex(2 * send_data[0], battery_level);

	// Send battery level data via LoRa
	//QM_PRINTF("Send battery level message\n");
	xbee_tx(QM_UART_0);

	// Flash Red LED
	led_r_flash();

	//Debug mode
	if (DEBUG_MODE)
	{
		QM_PRINTF("(1/6) Battery Level: %d\n",2 * send_data[0]);
	}

	// Create 62 sec delay for duty cycle limit
    clk_sys_udelay(62000000);


    // Soil EC=====================================================================
    uint8_t soil_ec[5];
    conv_to_2B_hex(send_data[1], soil_ec);

    // Send soil EC data via LoRa
    //QM_PRINTF("Send soil EC message\n");
    xbee_tx(QM_UART_0);
    // Flash Red LED
    led_r_flash();

    //Debug mode
    if (DEBUG_MODE)
    {
    	QM_PRINTF("(2/6) Soil EC: %d\n", send_data[1]);
    }

	// Create 62 sec delay for duty cycle limit
	clk_sys_udelay(62000000);

	// Soil Moisture===============================================================
	uint8_t soil_moisture[5];
	conv_to_2B_hex(send_data[2], soil_moisture);

	// Send soil moisture data via LoRa
	//QM_PRINTF("Send soil moisture message\n");
	xbee_tx(QM_UART_0);

	// Flash Red LED
	led_r_flash();

	//Debug mode
	if (DEBUG_MODE)
	{
	    QM_PRINTF("(3/6) Soil moisture: %d\n", send_data[2]);
	}

	// Create 62 sec delay for duty cycle limit
	clk_sys_udelay(62000000);

	// Soil pH=====================================================================
	uint8_t soil_ph[5];
	conv_to_2B_hex(send_data[3], soil_ph);

	// Send soil pH data via LoRa
	//QM_PRINTF("Send soil pH message\n");
	xbee_tx(QM_UART_0);

	// Flash Red LED
	led_r_flash();

	//Debug mode
	if (DEBUG_MODE)
	{
		 QM_PRINTF("(4/6) Soil pH: %d\n", send_data[3]);
	}

	// Create 62 sec delay for duty cycle limit
	clk_sys_udelay(62000000);


	// Temperature(sht10)=========================================================
	int temp_degree=0;
	uint8_t temp[5];

	temp_degree = get_sht10_temp();
	gpio_init(cfg2, cfg02);               // Initialise back the GPIO

	conv_to_2B_hex(temp_degree, temp);

	// Send temperature data via LoRa
	//QM_PRINTF("Send temperature message\n");
	xbee_tx(QM_UART_0);

	// Flash Red LED
	led_r_flash();

	//Debug mode
	if (DEBUG_MODE)
	{
		 QM_PRINTF("(5/6) Temperature: %d\n", temp_degree);
	}


	// Create 62 sec delay for duty cycle limit
	clk_sys_udelay(62000000);


	// Humidity (sht10)=========================================================

	int humidity_percent;
	uint8_t humidity[5];

	humidity_percent = get_sht10_rh_linear();
	gpio_init(cfg2, cfg02);               // Initialise back the GPIO

	conv_to_2B_hex(humidity_percent, humidity);

	// Send humidity data via LoRa
	//QM_PRINTF("Send humidity message\n");
	xbee_tx(QM_UART_0);

	// Flash Red LED
	led_r_flash();

	//Debug mode
	if (DEBUG_MODE)
	{
		 QM_PRINTF("(6/6) Humidity: %d\n\n", humidity_percent);
	}

	// Create 62 sec delay for duty cycle limit
	clk_sys_udelay(62000000);

}

uint8_t * radio_receive_data(uint8_t status[])
{
#if (SENSOR_TYPE == 4)
	//============================================================================//
	//                              E_LADANG0                                     //
	//============================================================================//

	// Initialisation for Pumps=====================================================
	uint8_t channel_pump_a[] = "00";
	uint8_t channel_pump_b[] = "01";

	// Initialisation for DL Data===================================================
	uint8_t downlink_data_a[100];
	uint8_t downlink_data_b[100];
	memset(downlink_data_a, 0, sizeof(downlink_data_a));
	memset(downlink_data_b, 0, sizeof(downlink_data_b));

	// Pump A=======================================================================
	clk_sys_udelay(2000000); // Delay 5 seconds (azwan changed to 2sec.default 5sec)
	xbee_rx(QM_UART_0, downlink_data_a, channel_pump_a);


	// Downlink data for Pump A
	uint8_t pump_a_cmd[] = "00";
	pump_a_cmd[0] = downlink_data_a[14];
	pump_a_cmd[1] = downlink_data_a[15];

	if (pump_a_cmd[1] != status[0])
	{
		status[0] = pump_a_cmd[1];

		// Take action
		if (downlink_data_a[15]=='1')
		{
			on_relay1();
			//led_r_on();
		}
		else
		{
			off_relay1();
			//led_r_off();
		}

		// Update Pump A status
		clk_sys_udelay(2000000); // Delay 5 seconds (azwan changed to 2sec.default 5sec)
		xbee_update_dl_status(QM_UART_0, channel_pump_a, pump_a_cmd);
	}

	// Pump B=======================================================================
	clk_sys_udelay(2000000); // Delay 5 seconds (azwan changed to 2sec.default 5sec)
	xbee_rx(QM_UART_0, downlink_data_b, channel_pump_b);

	// Downlink data for Pump B
	uint8_t pump_b_cmd[] = "00";
	pump_b_cmd[0] = downlink_data_b[14];
	pump_b_cmd[1] = downlink_data_b[15];

	if (pump_b_cmd[1] != status[1])
	{
		status[1] = pump_b_cmd[1];

		// Take action
		if (downlink_data_b[15]=='1')
		{
			on_relay4();
			//led_b_on();
		}
		else
		{
			off_relay4();
			//led_b_off();
		}

		// Update Pump B status
		clk_sys_udelay(2000000); // Delay 5 seconds (azwan changed to 2sec.default 5sec)
		xbee_update_dl_status(QM_UART_0, channel_pump_b, pump_b_cmd);
	}

	clk_sys_udelay(5000000); // Delay 10 seconds (azwan changed to 5sec.default 10sec)
#endif
	// For LoRa Under Testing (Pls Do Not Del)
	/*
	//uint8_t downlink_data[100];
	//memset(downlink_data,0,sizeof(downlink_data));

	for (int ii=0; ii<RX_DURATION_TIME; ii++)
	{
		xbee_rx(QM_UART_0, downlink_data);
	}
	*/

	return status;
}
