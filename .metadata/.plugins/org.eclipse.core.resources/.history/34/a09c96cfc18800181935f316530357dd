/*
 Copyright (c) 2017, Atilze Digital Sdn. Bhd.

 cellular_3g.c
 This is the library file for cellular 3G.

 Version   : 1.00
 Author    : Khoo Boon Kien / Tan Han Wei
 File Name : cellular_3g.c

 History:
   1.00 BK 27-Nov-17 Initial
 */

#include "qm_common.h"
#include "system/utilities.h"
#include "qm_uart.h"
#include "../main.h"
#include "qm_common.h"
#include "qm_pinmux.h"
#include "clk.h"
#include "qm_gpio.h"
#include "string.h"
#include "stdlib.h"
#include "system/gpio.h"

// Initialise the XBee 3G module
void cellular_3g_init(qm_uart_config_t *cfg)
{
    // Enable XBee Vcc
	qm_gpio_set_pin(QM_GPIO_0, 20);

	qm_pmux_select(QM_PIN_ID_19, QM_PMUX_FN_0);  // UART0 TXD
	qm_pmux_select(QM_PIN_ID_18, QM_PMUX_FN_0);  // UART0 RXD
	qm_pmux_select(QM_PIN_ID_41, QM_PMUX_FN_1);  // UART0 RTS
	qm_pmux_select(QM_PIN_ID_40, QM_PMUX_FN_1);  // UART0 CTS
	qm_pmux_input_en(QM_PIN_ID_18, true);
	qm_pmux_input_en(QM_PIN_ID_41, true);

    // Configures UART_0 for 9600 bps
    cfg->baud_divisor = QM_UART_CFG_BAUD_DL_PACK(0, 208, 5);
    cfg->line_control = QM_UART_LC_8N1;
    cfg->hw_fc = false;

    qm_uart_set_config(QM_UART_0, cfg);

    // enable clock for UART_0
    clk_periph_enable(CLK_PERIPH_CLK | CLK_PERIPH_UARTA_REGISTER);

    clk_sys_udelay(5000000);    // Create 5 sec delay

    // Send +++ (Enter AT command mode)
    uint8_t at0[] = "+++";
    qm_uart_write_buffer(QM_UART_0, at0, (sizeof(at0) - 1));
    clk_sys_udelay(5000000);    // Create 5 sec delay

    // Send ATDE 50
    uint8_t at1[] = "ATDE 50\r\n";
    qm_uart_write_buffer(QM_UART_0, at1, (sizeof(at1) - 1));
    clk_sys_udelay(3000000); 	// Create 3 sec delay

    // Send ATWR
    uint8_t at2[] = "ATWR\r\n";
    qm_uart_write_buffer(QM_UART_0, at2, (sizeof(at2) - 1));
    clk_sys_udelay(3000000); 	// Create 3 sec delay

    // Send ATAC
    uint8_t at3[] = "ATAC\r\n";
    qm_uart_write_buffer(QM_UART_0, at3, (sizeof(at3) - 1));
    clk_sys_udelay(3000000); 	// Create 3 sec delay

    // Send ATCN (Exit AT command mode)
    uint8_t at4[] = "ATCN\r\n";
    qm_uart_write_buffer(QM_UART_0, at4, (sizeof(at4) - 1));
    clk_sys_udelay(5000000); 	// Create 5 sec delay

    // Send +++ (Enter AT command mode)
    uint8_t at5[] = "+++";
    qm_uart_write_buffer(QM_UART_0, at5, (sizeof(at5) - 1));
    clk_sys_udelay(5000000);    // Create 5 sec delay

//  // Send ATDL putsreq.com
	//uint8_t at6[] = "ATDL staging.atilze.com\r\n";
    uint8_t at6[] = "ATDL http://things.ubidots.com/api/v1.6/devices/devicex\r\n";
    qm_uart_write_buffer(QM_UART_0, at6, (sizeof(at6) - 1));
    clk_sys_udelay(3000000); 	// Create 3 sec delay

    //azwan add test
    uint8_t uart_buffer=0;
	uint8_t uart_rx[16];
	memset(uart_rx,0,sizeof(uart_rx));

	static qm_uart_status_t uart0_status __attribute__((unused)) = 0;
    qm_uart_get_status(QM_UART_0, &uart0_status);
	clk_sys_udelay(10000); 	// Create 10 milisec delay

	if (uart0_status != QM_UART_IDLE)
	{
		for(int jj=0; jj<4; jj++)
		{
			qm_uart_read(QM_UART_0, &uart_buffer, &uart0_status);
			uart_rx[jj] = uart_buffer;
			QM_PRINTF("jj: %d",jj);
			QM_PRINTF("%s",uart_rx);
		}

	}
	//ends



    // Send ATWR
    uint8_t at7[] = "ATWR\r\n";
    qm_uart_write_buffer(QM_UART_0, at7, (sizeof(at7) - 1));
    clk_sys_udelay(3000000); 	// Create 3 sec delay

    // Send ATAC
    uint8_t at8[] = "ATAC\r\n";
    qm_uart_write_buffer(QM_UART_0, at8, (sizeof(at8) - 1));
    clk_sys_udelay(3000000); 	// Create 3 sec delay

    // Send ATCN (Exit AT command mode)
    uint8_t at9[] = "ATCN\r\n";
    qm_uart_write_buffer(QM_UART_0, at9, (sizeof(at9) - 1));
    clk_sys_udelay(5000000); 	// Create 5 sec delay
}

// Send data via 3G
void cellular_3g_send(const qm_uart_t uart, uint16_t device_id, uint8_t frame_cntr, uint8_t data_ch, uint16_t data_type, uint8_t data[], uint8_t data_len)
{
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	//      Conv. to respective HEX size                           //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// Device ID (2 bytes)
	uint8_t tx_device_id[5];
	conv_to_2B_hex(device_id, tx_device_id);

    // Frame Counter (1 byte)
	uint8_t tx_frame_cntr[3];
	conv_to_1B_hex(frame_cntr, tx_frame_cntr);

	// Data Channel (1 byte)
	uint8_t tx_data_ch[3];
	conv_to_1B_hex(data_ch, tx_data_ch);

	// Data Type (1 byte)
	uint8_t tx_data_type[3];
	conv_to_1B_hex(data_type-3200, tx_data_type);

	// Data (N bytes payload)
	uint8_t tx_data[data_len];
	for(uint8_t ii=0;ii<data_len;ii++) tx_data[ii] = data[ii];

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	//               Tx. packet                                    //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// Length of Tx Packet
	uint8_t tx_packet_len = data_len + 14 + 1;

	uint8_t tx_packet[tx_packet_len];

	// Arrange Tx packet
	tx_packet[0]  = tx_device_id[0];
	tx_packet[1]  = tx_device_id[1];
	tx_packet[2]  = tx_device_id[2];
	tx_packet[3]  = tx_device_id[3];
	tx_packet[4]  = '0';                // TODO: PLS CORRECT IT
	tx_packet[5]  = '0';                // TODO: PLS CORRECT IT
	tx_packet[6]  = '0';                // TODO: PLS CORRECT IT
	tx_packet[7]  = '0';                // TODO: PLS CORRECT IT
	tx_packet[8]  = tx_frame_cntr[0];
	tx_packet[9]  = tx_frame_cntr[1];
	tx_packet[10] = tx_data_ch[0];
	tx_packet[11] = tx_data_ch[1];
	tx_packet[12] = tx_data_type[0];
	tx_packet[13] = tx_data_type[1];
	for (uint8_t ii = 0; ii < tx_packet_len; ii++)
	{
		tx_packet[14+ii] = tx_data[ii];
	}
    tx_packet[tx_packet_len-1] = '\0';

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// 1st POST command ("POST POST_URL  HTTP/1.1\r\n")            //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	uint8_t cmd0_a[]  = "POST ";
	uint8_t cmd0_b[]  = POST_URL;
	uint8_t cmd0_c[]  = " HTTP/1.1\r\n";
	uint8_t cmd0[100];
	uint8_t size_of_cmd0 = sizeof(cmd0_a)+sizeof(cmd0_b)+sizeof(cmd0_c)-2;

	concat(cmd0, cmd0_a);
	concat(cmd0, cmd0_b);
	concat(cmd0, cmd0_c);

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// 2nd POST command ("Host: putsreq.com\r\n")                  //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	uint8_t cmd1_a[]  = "Host: ";
	uint8_t cmd1_b[]  = POST_HOST;
	uint8_t cmd1_c[]  = " \r\n";
	uint8_t cmd1[100];
	uint8_t size_of_cmd1 = sizeof(cmd1_a)+sizeof(cmd1_b)+sizeof(cmd1_c)-2;

	concat(cmd1, cmd1_a);
	concat(cmd1, cmd1_b);
	concat(cmd1, cmd1_c);

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// 3rd POST command ("Content-Type: application/json\r\n")     //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	uint8_t cmd2[] = "Content-Type: application/json\r\n";
	uint8_t size_of_cmd2 = sizeof(cmd2);

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// 4th POST command (Content-Length: 14\r\n\r\n)               //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	int content_len = 194 + sizeof(tx_packet)-1;
	uint8_t content_len_c[3];
	int2char(content_len, content_len_c);

	uint8_t cmd3_a[]  = "Content-Length: ";
	uint8_t cmd3_b[sizeof(content_len_c)+4+1];
	cmd3_b[0]  = content_len_c[2];
    cmd3_b[1]  = content_len_c[1];
    cmd3_b[2]  = content_len_c[0];
	cmd3_b[3]  = '\r';
	cmd3_b[4]  = '\n';
	cmd3_b[5]  = '\r';
	cmd3_b[6]  = '\n';

	uint8_t cmd3[100];
	uint8_t size_of_cmd3 = sizeof(cmd3_a)+sizeof(cmd3_b)-1;

	concat(cmd3, cmd3_a);
	concat(cmd3, cmd3_b);

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// 5th POST command ("{\"data\":\"PAYLOAD\"}\r\n")             //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	uint8_t cmd4_a[]  = "{\"message\":{\"id\":\"0\",\"macAddr\":\"00000000FFFFFF38\",\"data\":\"";
	uint8_t cmd4_b[sizeof(tx_packet)];
    for (uint8_t ii = 0; ii < sizeof(tx_packet); ii++)
    	cmd4_b[ii] = tx_packet[ii];
    uint8_t cmd4_c[]  = "\",\"recv\":\"0\",\"extra\":{\"commsysType\":\"0\",\"rssi\":-47,\"snr\":0,\"frameCnt\":1,\"gwid\":\"0\",\"gwip\":\"0\",\"channel\":0,\"sf\":0,\"fport\":0},\"pub\":\"0\"}}\r\n";
	uint8_t cmd4[300];
	uint8_t size_of_cmd4 = sizeof(cmd4_a)+sizeof(cmd4_b)+sizeof(cmd4_c)-2;

	concat(cmd4, cmd4_a);
	concat(cmd4, cmd4_b);
	concat(cmd4, cmd4_c);

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// Send the POST msgs over HTTP                                //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	qm_uart_write_buffer(uart, cmd0, (size_of_cmd0- 1)); 	 clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd1, (size_of_cmd1- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd2, (size_of_cmd2- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd3, (size_of_cmd3- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd4, (size_of_cmd4- 1));     clk_sys_udelay(500000); // Delay 0.5 second

	memset(cmd0,0,sizeof(cmd0));
	memset(cmd1,0,sizeof(cmd1));
	memset(cmd2,0,sizeof(cmd2));
	memset(cmd3,0,sizeof(cmd3));
	memset(cmd4,0,sizeof(cmd4));

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// Test Bench (Do Not Delete)                                  //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	/*
    // Test Codes
	uint8_t cmd0[] = "POST /GHiLtvmGg8D0aFDhKuEu HTTP/1.1\r\n";
	uint8_t cmd1[] = "Host: putsreq.com\r\n";
	uint8_t cmd2[] = "Content-Type: application/json\r\n";
	uint8_t cmd3[] = "Content-Length: 14\r\n\r\n";
	uint8_t cmd4[] = "{\"data\":\"123\"}\r\n";
	*/

	/*
	uint8_t cmd0[] = "POST /api/temp/device/data/inbound HTTP/1.1\r\n";
	uint8_t cmd1[] = "Host: staging.atilze.com\r\n";
	uint8_t cmd2[] = "Content-Type: application/json\r\n";
	uint8_t cmd3[] = "Content-Length: 212\r\n\r\n";
	//uint8_t cmd4[] = "{\"data\":\"123\"}\r\n";

	uint8_t cmd4[] = "{\"message\":{\"id\":\"0\",\"macAddr\":\"000000000FFFFFF1\",\"data\":\"000000000100670c1c\",\"recv\":\"0\",\"extra\":{\"commsysType\":\"0\",\"rssi\":-47,\"snr\":0,\"frameCnt\":1,\"gwid\":\"0\",\"gwip\":\"0\",\"channel\":0,\"sf\":0,\"fport\":0},\"pub\":\"0\"}}\r\n";
    */

	//uint8_t tx_packet[] = "000000000100670c1c";
	/*
	qm_uart_write_buffer(uart, cmd0, (sizeof(cmd0)- 1)); 	 clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd1, (sizeof(cmd1)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd2, (sizeof(cmd2)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd3, (sizeof(cmd3)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd4, (sizeof(cmd4)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
    */
}

void cellular_3g_send_ubidots(const qm_uart_t uart)
{
	static qm_uart_status_t uart0_status __attribute__((unused)) = 0;
	/*
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	//      Conv. to respective HEX size                           //
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	// Device ID (2 bytes)
//	uint8_t tx_device_id[5];
//	conv_to_2B_hex(device_id, tx_device_id);
//
//    // Frame Counter (1 byte)
//	uint8_t tx_frame_cntr[3];
//	conv_to_1B_hex(frame_cntr, tx_frame_cntr);
//
//	// Data Channel (1 byte)
//	uint8_t tx_data_ch[3];
//	conv_to_1B_hex(data_ch, tx_data_ch);
//
//	// Data Type (1 byte)
//	uint8_t tx_data_type[3];
//	conv_to_1B_hex(data_type-3200, tx_data_type);
//
//	// Data (N bytes payload)
//	uint8_t tx_data[data_len];
//	for(uint8_t ii=0;ii<data_len;ii++) tx_data[ii] = data[ii];
//
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	//               Tx. packet                                    //
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	// Length of Tx Packet
//	uint8_t tx_packet_len = data_len + 14 + 1;
//
//	uint8_t tx_packet[tx_packet_len];
//
//	// Arrange Tx packet
//	tx_packet[0]  = tx_device_id[0];
//	tx_packet[1]  = tx_device_id[1];
//	tx_packet[2]  = tx_device_id[2];
//	tx_packet[3]  = tx_device_id[3];
//	tx_packet[4]  = '0';                // TODO: PLS CORRECT IT
//	tx_packet[5]  = '0';                // TODO: PLS CORRECT IT
//	tx_packet[6]  = '0';                // TODO: PLS CORRECT IT
//	tx_packet[7]  = '0';                // TODO: PLS CORRECT IT
//	tx_packet[8]  = tx_frame_cntr[0];
//	tx_packet[9]  = tx_frame_cntr[1];
//	tx_packet[10] = tx_data_ch[0];
//	tx_packet[11] = tx_data_ch[1];
//	tx_packet[12] = tx_data_type[0];
//	tx_packet[13] = tx_data_type[1];
//	for (uint8_t ii = 0; ii < tx_packet_len; ii++)
//	{
//		tx_packet[14+ii] = tx_data[ii];
//	}
//    tx_packet[tx_packet_len-1] = '\0';
*/

//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	// 1st POST command ("POST POST_URL  HTTP/1.1\r\n")            //
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	uint8_t cmd0_a[]  = "POST ";
//	uint8_t cmd0_b[]  = "/api/v1.6/devices/devicex/variablex/values/?token=A1E-kvuGQMIEMhwiHcUGI1MQNZE0n0wHqJ";
//	uint8_t cmd0_c[]  = " HTTP/1.1\r\n";
//	uint8_t cmd0[100];
//	uint8_t size_of_cmd0 = sizeof(cmd0_a)+sizeof(cmd0_b)+sizeof(cmd0_c)-2;
//
//	concat(cmd0, cmd0_a);
//	concat(cmd0, cmd0_b);
//	concat(cmd0, cmd0_c);
//
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	// 2nd POST command ("Host: putsreq.com\r\n")                  //
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	uint8_t cmd1_a[]  = "Host: ";
//	uint8_t cmd1_b[]  = "http://things.ubidots.com";
//	uint8_t cmd1_c[]  = " \r\n";
//	uint8_t cmd1_d[]  = "/api/v1.6/devices/";
//	uint8_t cmd1[100];
//	uint8_t size_of_cmd1 = sizeof(cmd1_a)+sizeof(cmd1_b)+sizeof(cmd1_c)+sizeof(cmd1_d)-3;
//
//	concat(cmd1, cmd1_a);
//	concat(cmd1, cmd1_b);
//	concat(cmd1, cmd1_c);
//
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	// 3rd POST command ("Content-Type: application/json\r\n")     //
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	uint8_t cmd2[] = "\"X-Auth-Token\": A1E-kvuGQMIEMhwiHcUGI1MQNZE0n0wHqJ \"Content-Type\": \"application/json\"\r\n";
//	uint8_t size_of_cmd2 = sizeof(cmd2);
//
///*
////	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
////	// 4th POST command (Content-Length: 14\r\n\r\n)               //
////	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
////	int content_len = 194 + sizeof(tx_packet)-1;
////	uint8_t content_len_c[3];
////	int2char(content_len, content_len_c);
////
////	uint8_t cmd3_a[]  = "Content-Length: ";
////	uint8_t cmd3_b[sizeof(content_len_c)+4+1];
////	cmd3_b[0]  = content_len_c[2];
////    cmd3_b[1]  = content_len_c[1];
////    cmd3_b[2]  = content_len_c[0];
////	cmd3_b[3]  = '\r';
////	cmd3_b[4]  = '\n';
////	cmd3_b[5]  = '\r';
////	cmd3_b[6]  = '\n';
////
////	uint8_t cmd3[100];
////	uint8_t size_of_cmd3 = sizeof(cmd3_a)+sizeof(cmd3_b)-1;
////
////	concat(cmd3, cmd3_a);
////	concat(cmd3, cmd3_b);
// */
//
//	uint8_t cmd3_1[]  = "Content-Length: 76";
//	uint8_t size_of_cmd3_1 = sizeof(cmd3_1);
//
//	//ubidots data
//	uint8_t cmd4[]="{\"value\":11.21}";
//	uint8_t size_of_cmd4 = sizeof(cmd4);
//	//ends


	//test data
	uint8_t cmd5[]="{'Content-Type': 'application/json','X-Auth-Token': 'A1E-kvuGQMIEMhwiHcUGI1MQNZE0n0wHqJ'}\r\n";
	uint8_t size_of_cmd5 = sizeof(cmd5);

	uint8_t cmd6[]="{'variablex': 14}\r\n";
	uint8_t size_of_cmd6 = sizeof(cmd6);

	qm_uart_write_buffer(uart, cmd5, (size_of_cmd5- 1));
	clk_sys_udelay(500000); // Delay 0.5 second

	qm_uart_write_buffer(uart, cmd6, (size_of_cmd6- 1));
	clk_sys_udelay(500000); // Delay 0.5 second

	//ends

//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	// Send the POST msgs over HTTP                                //
//	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//	qm_uart_write_buffer(uart, cmd0, (size_of_cmd0- 1));
//	clk_sys_udelay(500000); // Delay 0.5 second
//	qm_uart_write_buffer(uart, cmd1, (size_of_cmd1- 1));
//	clk_sys_udelay(500000); // Delay 0.5 second
//	qm_uart_write_buffer(uart, cmd2, (size_of_cmd2- 1));
//	clk_sys_udelay(500000); // Delay 0.5 second
//	qm_uart_write_buffer(uart, cmd3_1, (size_of_cmd3_1- 1));
//	clk_sys_udelay(500000); // Delay 0.5 second
//	qm_uart_write_buffer(uart, cmd4, (size_of_cmd4- 1));
//	clk_sys_udelay(500000); // Delay 0.5 second
//
//	memset(cmd0,0,sizeof(cmd0));
//	memset(cmd1,0,sizeof(cmd1));
//	memset(cmd2,0,sizeof(cmd2));
//	memset(cmd3_1,0,sizeof(cmd3_1));
//	memset(cmd4,0,sizeof(cmd4));

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	// Test Bench (Do Not Delete)                                  //
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	/*
    // Test Codes
	uint8_t cmd0[] = "POST /GHiLtvmGg8D0aFDhKuEu HTTP/1.1\r\n";
	uint8_t cmd1[] = "Host: putsreq.com\r\n";
	uint8_t cmd2[] = "Content-Type: application/json\r\n";
	uint8_t cmd3[] = "Content-Length: 14\r\n\r\n";
	uint8_t cmd4[] = "{\"data\":\"123\"}\r\n";
	*/

	/*
	uint8_t cmd0[] = "POST /api/temp/device/data/inbound HTTP/1.1\r\n";
	uint8_t cmd1[] = "Host: staging.atilze.com\r\n";
	uint8_t cmd2[] = "Content-Type: application/json\r\n";
	uint8_t cmd3[] = "Content-Length: 212\r\n\r\n";
	//uint8_t cmd4[] = "{\"data\":\"123\"}\r\n";

	uint8_t cmd4[] = "{\"message\":{\"id\":\"0\",\"macAddr\":\"000000000FFFFFF1\",\"data\":\"000000000100670c1c\",\"recv\":\"0\",\"extra\":{\"commsysType\":\"0\",\"rssi\":-47,\"snr\":0,\"frameCnt\":1,\"gwid\":\"0\",\"gwip\":\"0\",\"channel\":0,\"sf\":0,\"fport\":0},\"pub\":\"0\"}}\r\n";
    */

	//uint8_t tx_packet[] = "000000000100670c1c";
	/*
	qm_uart_write_buffer(uart, cmd0, (sizeof(cmd0)- 1)); 	 clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd1, (sizeof(cmd1)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd2, (sizeof(cmd2)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd3, (sizeof(cmd3)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
	qm_uart_write_buffer(uart, cmd4, (sizeof(cmd4)- 1));     clk_sys_udelay(500000); // Delay 0.5 second
    */
}
// Check 3G connectivity
void cellular_3g_connect(const qm_uart_t uart)
{
	uint8_t uart_buffer=0;
	uint8_t uart_rx[16];
	memset(uart_rx,0,sizeof(uart_rx));

	static qm_uart_status_t uart0_status __attribute__((unused)) = 0;

	// Clear buffer and flush all the data
	qm_uart_get_status(uart, &uart0_status);
	clk_sys_udelay(10000); 	// Create 10 milisec delay
	if (uart0_status != QM_UART_IDLE)
	{
		for(int jj=0; jj<16; jj++)
		{
			qm_uart_read(QM_UART_0, &uart_buffer, &uart0_status);
			uart_rx[jj] = uart_buffer;
		}
	}
	clk_sys_udelay(2000000); 	// Create 2 sec delay

	// Make sure it is connected
	while (1)
	{
        // Send +++ (Enter AT command mode)
		uint8_t at0[] = "+++";
		qm_uart_write_buffer(uart, at0, (sizeof(at0) - 1));

		// Total of 6 seconds delay with blinking LED
		for(int jj=0; jj<3; jj++)
		{
		  led_b_flash();             // Flash LED2 (RED)
		  clk_sys_udelay(1000000); 	// Create 1 sec delay
		}

		// Send ATAI
		uint8_t at1[] = "ATAI\r\n";
		qm_uart_write_buffer(uart, at1, (sizeof(at1) - 1));

		// Total of 2 seconds delay with blinking LED
		led_b_flash();               // Flash LED2 (RED)
		clk_sys_udelay(1000000); 	// Create 1 sec delay

		qm_uart_get_status(uart, &uart0_status);
		clk_sys_udelay(10000); 	// Create 10 milisec delay

		if (uart0_status != QM_UART_IDLE)
		{
			for(int jj=0; jj<4; jj++)
			{
				qm_uart_read(QM_UART_0, &uart_buffer, &uart0_status);
                uart_rx[jj] = uart_buffer;
			}

			if (uart_rx[3] == 48)// Check for '0'
			{
				led_b_on();
				break;
			}

		}

		// Total 10 seconds delay with blinking LED
		for(int jj=0; jj<5; jj++)
		{
		  led_b_flash();             // Flash LED2 (RED)
		  clk_sys_udelay(1000000); 	// Create 1 sec delay
		}
	}

}
